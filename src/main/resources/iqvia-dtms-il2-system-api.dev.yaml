system:
  api:
    Id: ""
    host: "0.0.0.0"
    basepath: "/v1"


pool:
  maxSize: "2"
  minSize: "1"
  acquireInc: "1"
  cacheSize: "0"
  maxWait: "3"
  maxIdleTime: "0"
  
db:
  retryInterval: "600000" 
  retryCount: "3"
  user:
    userSel: SELECT ID, Q_ID, USER_NAME, LOCATION_DETAIL_ID FROM USERS WHERE CONTACT_ID=:LAST_USER AND RECORD_STATUS=0
  actionItem:
    status: select ID from STUDY_ISSUE_STATUS where NAME=:NAME AND RECORD_STATUS=0 
    type: select ID from STUDY_ISSUE_TYPE where RECORD_STATUS=0 AND PROTOCOL_ID =:PROTOCOL_ID AND NAME=:NAME
    insert: insert into STUDY_ISSUE (OWNER, OCCURRANCE_DATE, DATE_CLOSED, FOLLOW_UP_DATE, COMMENTS, STUDY_ISSUE_TYPE_ID, NOTES, STUDY_ISSUE_STATUS_ID, PROTOCOL_SITE_ID, ENTITY_ID, RECORD_STATUS, ALLOW_OMVR_UPDATES, RECORD_LOCKED, DATE_CREATED, DATE_START, LAST_USER, ASSIGNED_TO) VALUES (:OWNER, :OCCURRANCE_DATE, :DATE_CLOSED, :FOLLOW_UP_DATE, :COMMENTS, :STUDY_ISSUE_TYPE_ID, :NOTES, :STUDY_ISSUE_STATUS_ID, :PROTOCOL_SITE_ID, :ENTITY_ID, :RECORD_STATUS, :ALLOW_OMVR_UPDATES, :RECORD_LOCKED, :DATE_CREATED, :DATE_START, :LAST_USER, :ASSIGNED_TO)
    update: update STUDY_ISSUE set OCCURRANCE_DATE=:OCCURRANCE_DATE, DATE_CLOSED=:DATE_CLOSED, FOLLOW_UP_DATE=:FOLLOW_UP_DATE, COMMENTS=:COMMENTS, STUDY_ISSUE_TYPE_ID=:STUDY_ISSUE_TYPE_ID, NOTES=:NOTES, STUDY_ISSUE_STATUS_ID=:STUDY_ISSUE_STATUS_ID, PROTOCOL_SITE_ID=:PROTOCOL_SITE_ID, RECORD_LOCKED=:RECORD_LOCKED, LAST_USER=:LAST_USER, ASSIGNED_TO=:ASSIGNED_TO where ID=:ID AND RECORD_STATUS=0
  siteVisit:
    visitSel: SELECT PLANNED_VISIT_DATE FROM MONITORING_VISIT WHERE ID=:ID AND RECORD_STATUS=0
    visitIns: INSERT INTO MONITORING_VISIT (MONITORING_METHOD, ENTITY_ID, RECORD_STATUS, MVR_DOC_STATUS, MONITORING_VISIT_TYPE, ACTUAL_VISIT_DATE, VISIT_END_DATE, VISIT_STATUS, PLANNED_VISIT_DATE, PROTOCOL_SITE_ID, IS_WAIVED, OWNER, LAST_USER, DATE_CREATED, DATE_START) VALUES(:MONITORING_METHOD, :ENTITY_ID, :RECORD_STATUS, :MVR_DOC_STATUS, :MONITORING_VISIT_TYPE, :ACTUAL_VISIT_DATE, :VISIT_END_DATE, :VISIT_STATUS, :PLANNED_VISIT_DATE, :PROTOCOL_SITE_ID, :IS_WAIVED, :OWNER, :LAST_USER, :DATE_CREATED, :DATE_START)
    visitUpd: UPDATE MONITORING_VISIT SET MONITORING_METHOD=:MONITORING_METHOD, MONITORING_VISIT_TYPE=:MONITORING_VISIT_TYPE, ACTUAL_VISIT_DATE=:ACTUAL_VISIT_DATE, VISIT_END_DATE=:VISIT_END_DATE, VISIT_STATUS=:VISIT_STATUS, PLANNED_VISIT_DATE=:PLANNED_VISIT_DATE, PROTOCOL_SITE_ID=:PROTOCOL_SITE_ID, IS_WAIVED=:IS_WAIVED, LAST_USER=:LAST_USER, RECORD_STATUS=:RECORD_STATUS WHERE ID=:ID AND RECORD_STATUS=0
    #contactSel: SELECT MC.ID FROM MONITORING_CONTACT MC JOIN CONTACT_PROTOCOL_ORG CPO ON MC.CONTACT_PROTOCOL_ORG_ID = CPO.ID JOIN USERS U ON CPO.CONTACT_ID = U.CONTACT_ID WHERE U.USER_NAME =:USER_NAME AND MC.PROTOCOL_SITE_ID =:PROTOCOL_SITE_ID AND MC.RECORD_STATUS=0 AND CPO.RECORD_STATUS=0 AND U.RECORD_STATUS=0
    contactSel: SELECT MC.ID FROM MONITORING_CONTACT MC JOIN CONTACT_PROTOCOL_ORG CPO ON MC.CONTACT_PROTOCOL_ORG_ID = CPO.ID  WHERE CPO.CONTACT_ID =:CONTACT_ID AND MC.PROTOCOL_SITE_ID =:PROTOCOL_SITE_ID AND MC.RECORD_STATUS=0 AND CPO.RECORD_STATUS=0
    contactPrevSel: SELECT MONITORING_CONTACT_ID FROM MONITORING_VISIT_CONTACT WHERE MONITORING_VISIT_ID=:MONITORING_VISIT_ID AND RECORD_STATUS =0
    contactIns: INSERT INTO MONITORING_VISIT_CONTACT (MONITORING_VISIT_ID, MONITORING_CONTACT_ID, PRIMARY_VISIT_CONTACT, ENTITY_ID, RECORD_STATUS, VISIT_DAYS, OWNER, LAST_USER, DATE_CREATED, DATE_START) VALUES (:MONITORING_VISIT_ID, :MONITORING_CONTACT_ID, :PRIMARY_VISIT_CONTACT, :ENTITY_ID, :RECORD_STATUS, :VISIT_DAYS, :OWNER, :LAST_USER, :DATE_CREATED, :DATE_START)
    contactUpd: UPDATE MONITORING_VISIT_CONTACT SET MONITORING_CONTACT_ID=:MONITORING_CONTACT_ID, PRIMARY_VISIT_CONTACT=:PRIMARY_VISIT_CONTACT, VISIT_DAYS=:VISIT_DAYS, LAST_USER=:LAST_USER WHERE MONITORING_VISIT_ID=:MONITORING_VISIT_ID AND RECORD_STATUS=0
    contactDel: UPDATE MONITORING_VISIT_CONTACT SET LAST_USER=:LAST_USER, RECORD_STATUS=1 WHERE MONITORING_VISIT_ID=:MONITORING_VISIT_ID
    documentIns: INSERT INTO DOCUMENT (MONITORING_VISIT_ID, DOCUMENT_SKIPPED, ENTITY_ID, RECORD_STATUS, DOCUMENT_VERSION, DOCUMENT_TYPE, DOCUMENT_SENT_DATE, DOC_NEEDS_REVIEW, MUST_BE_TRACKED, IS_TEMPLATE, RF_ENROLLMENT, RF_STUDY, RF_IP_SHIPMENT, RF_AUDIT, RF_IRB_EC_SUBMITTAL, RT_BEFORE_SEND, RT_AFTER_RECEIVED, RT_FINAL, OWNER, LAST_USER, DATE_CREATED, DATE_START) VALUES (:MONITORING_VISIT_ID, :DOCUMENT_SKIPPED, :ENTITY_ID, :RECORD_STATUS, :DOCUMENT_VERSION, :DOCUMENT_TYPE, :DOCUMENT_SENT_DATE, :DOC_NEEDS_REVIEW, :MUST_BE_TRACKED, :IS_TEMPLATE, :RF_ENROLLMENT, :RF_STUDY, :RF_IP_SHIPMENT, :RF_AUDIT, :RF_IRB_EC_SUBMITTAL, :RT_BEFORE_SEND, :RT_AFTER_RECEIVED, :RT_FINAL, :OWNER, :LAST_USER, :DATE_CREATED, :DATE_START)
    documentUpd: UPDATE DOCUMENT SET DOCUMENT_VERSION=:DOCUMENT_VERSION, DOCUMENT_TYPE=:DOCUMENT_TYPE, DOCUMENT_SENT_DATE=:DOCUMENT_SENT_DATE, LAST_USER=:LAST_USER WHERE MONITORING_VISIT_ID=:MONITORING_VISIT_ID AND SUBSTRING(DOCUMENT_TYPE,5,20)=:DOC_TYPE AND RECORD_STATUS=0
  protocolDeviation:
    pdCategory: SELECT ID FROM PD_CATEGORY WHERE NAME=:NAME AND PROTOCOL_ID=:PROTOCOL_ID AND RECORD_STATUS=0
    pdFollowUpAction: SELECT ID FROM PD_FOLLOW_UP_ACTION WHERE NAME=:NAME AND PROTOCOL_ID=:PROTOCOL_ID AND RECORD_STATUS=0
    deviationIns: INSERT INTO PROTOCOL_DEVIATION (RECORD_LOCKED, NO_SUBJECT_ASSOCIATED, PROTOCOL_ID, DATE_REPORTED, DATE_OCCURED, PD_CATEGORY_ID, CAUSALITY, DESCRIPTION, IRBEC_REPORT_REQ, ACTUAL_IRBEC_REPORT_DATE, EXPECTED_IRBEC_REPORT_DATE, DATE_SPONSOR_NOTIFIED, DATE_SPONSOR_ACKNOWLEDGED, STATUS, FOLLOW_UP_REQUIRED, ENTITY_ID, RECORD_STATUS, PD_FOLLOW_UP_ACTION_ID, FOLLOW_UP_CORRECTIVE, FOLLOW_UP_PREVENTATIVE, MAJOR_MINOR, DATE_CREATED, DATE_START, SPONSOR_ACKNOWLEDGED, OWNER, LAST_USER) VALUES (:RECORD_LOCKED, :NO_SUBJECT_ASSOCIATED, :PROTOCOL_ID, :DATE_REPORTED, :DATE_OCCURED, :PD_CATEGORY_ID, :CAUSALITY, :DESCRIPTION, :IRBEC_REPORT_REQ, :ACTUAL_IRBEC_REPORT_DATE, :EXPECTED_IRBEC_REPORT_DATE, :DATE_SPONSOR_NOTIFIED, :DATE_SPONSOR_ACKNOWLEDGED, :STATUS, :FOLLOW_UP_REQUIRED, :ENTITY_ID, :RECORD_STATUS, :PD_FOLLOW_UP_ACTION_ID, :FOLLOW_UP_CORRECTIVE, :FOLLOW_UP_PREVENTATIVE, :MAJOR_MINOR, :DATE_CREATED, :DATE_START, :SPONSOR_ACKNOWLEDGED, :OWNER, :LAST_USER)
    deviationUpd: UPDATE PROTOCOL_DEVIATION SET RECORD_LOCKED=:RECORD_LOCKED, NO_SUBJECT_ASSOCIATED=:NO_SUBJECT_ASSOCIATED, PROTOCOL_ID=:PROTOCOL_ID, DATE_REPORTED=:DATE_REPORTED, DATE_OCCURED=:DATE_OCCURED, PD_CATEGORY_ID=:PD_CATEGORY_ID, CAUSALITY=:CAUSALITY, DESCRIPTION=:DESCRIPTION, IRBEC_REPORT_REQ=:IRBEC_REPORT_REQ, ACTUAL_IRBEC_REPORT_DATE=:ACTUAL_IRBEC_REPORT_DATE, EXPECTED_IRBEC_REPORT_DATE=:EXPECTED_IRBEC_REPORT_DATE, DATE_SPONSOR_NOTIFIED=:DATE_SPONSOR_NOTIFIED, DATE_SPONSOR_ACKNOWLEDGED=:DATE_SPONSOR_ACKNOWLEDGED, STATUS=:STATUS, FOLLOW_UP_REQUIRED=:FOLLOW_UP_REQUIRED, PD_FOLLOW_UP_ACTION_ID=:PD_FOLLOW_UP_ACTION_ID, FOLLOW_UP_CORRECTIVE=:FOLLOW_UP_CORRECTIVE, FOLLOW_UP_PREVENTATIVE=:FOLLOW_UP_PREVENTATIVE, MAJOR_MINOR=:MAJOR_MINOR, LAST_USER=:LAST_USER WHERE ID=:ID AND RECORD_STATUS=0
    deviationSel: SELECT PROTOCOL_DEVIATION_ID, NO_SUBJECT_ASSOCIATED FROM PD_SITE WHERE ID=:ID AND RECORD_STATUS=0
    pdSiteIns: INSERT INTO PD_SITE (PROTOCOL_DEVIATION_ID, PROTOCOL_SITE_ID, PI_NOTIFIED, ENTITY_ID, RECORD_STATUS, NO_SUBJECT_ASSOCIATED, DATE_CREATED, DATE_START, OWNER, LAST_USER) VALUES (:PROTOCOL_DEVIATION_ID, :PROTOCOL_SITE_ID, :PI_NOTIFIED, :ENTITY_ID, :RECORD_STATUS, :NO_SUBJECT_ASSOCIATED, :DATE_CREATED, :DATE_START, :OWNER, :LAST_USER)
    pdSiteUpd: UPDATE PD_SITE SET PROTOCOL_SITE_ID=:PROTOCOL_SITE_ID, NO_SUBJECT_ASSOCIATED=:NO_SUBJECT_ASSOCIATED, LAST_USER=:LAST_USER WHERE ID=:ID AND RECORD_STATUS=0
    pdSitePatientIns: INSERT INTO PD_SITE_PATIENT (PD_SITE_ID, PATIENT_NUMBER, SUBJECT_WITHDRAWN, ENTITY_ID, RECORD_STATUS, DATE_CREATED, DATE_START, OWNER, LAST_USER) VALUES (:PD_SITE_ID, :PATIENT_NUMBER, :SUBJECT_WITHDRAWN, :ENTITY_ID, :RECORD_STATUS, :DATE_CREATED, :DATE_START, :OWNER, :LAST_USER)
    pdSitePatientUpd: UPDATE PD_SITE_PATIENT SET PATIENT_NUMBER=:PATIENT_NUMBER, SUBJECT_WITHDRAWN=:SUBJECT_WITHDRAWN, LAST_USER=:LAST_USER WHERE PD_SITE_ID=:PD_SITE_ID AND RECORD_STATUS=0
    pdSitePatientDel: UPDATE PD_SITE_PATIENT SET LAST_USER=:LAST_USER, RECORD_STATUS=1 WHERE PD_SITE_ID=:PD_SITE_ID
  contact:
    #contactSel: SELECT C.ID FROM CONTACT C JOIN EMAIL E ON C.ID = E.CONTACT_ID WHERE FIRST_NAME=:FIRST_NAME AND LAST_NAME=:LAST_NAME AND EMAIL_ADDRESS=:EMAIL_ADDRESS AND C.RECORD_STATUS=0 AND E.RECORD_STATUS=0
    contactSel: SELECT ID FROM (SELECT C.ID, rank() over(partition by E.EMAIL_ADDRESS order by case when E.EMAIL_TYPE ='Primary' then 1 else 2 end, E.DATE_CREATED) EMLRNK FROM CONTACT C JOIN EMAIL E ON C.ID = E.CONTACT_ID WHERE FIRST_NAME=:FIRST_NAME AND LAST_NAME=:LAST_NAME AND EMAIL_ADDRESS=:EMAIL_ADDRESS AND C.RECORD_STATUS=0 AND E.RECORD_STATUS=0) INR WHERE EMLRNK=1
    contactIns: INSERT INTO CONTACT (FIRST_NAME, LAST_NAME, CONTACT_STATUS, DATE_CREATED, DATE_START, IS_INVESTIGATOR, NOVELLA_EXPERIENCE, QUINTILES_EXPERIENCE, INV_INFANTS, INV_NEONATES, INV_PEDIATRIC, INV_CENTRAL_IRB, INV_RETIRED, INV_DECEASED, ENTITY_ID, RECORD_STATUS, OWNER, LAST_USER) VALUES (:FIRST_NAME, :LAST_NAME, :CONTACT_STATUS, :DATE_CREATED, :DATE_START,:IS_INVESTIGATOR, :NOVELLA_EXPERIENCE, :QUINTILES_EXPERIENCE, :INV_INFANTS, :INV_NEONATES, :INV_PEDIATRIC, :INV_CENTRAL_IRB, :INV_RETIRED, :INV_DECEASED, :ENTITY_ID, :RECORD_STATUS, :OWNER, :LAST_USER)
    #contactUpd: UPDATE CONTACT SET PRIMARY_EMAIL_ID=:PRIMARY_EMAIL_ID WHERE ID=:ID AND RECORD_STATUS=0
    emailIns: INSERT INTO EMAIL (IS_PRIMARY, SHARED_EMAIL_ADDRESS, EMAIL_ADDRESS, EMAIL_TYPE, CONTACT_ID, DATE_CREATED, DATE_START, FROM_ASCO, ENTITY_ID, RECORD_STATUS, OWNER, LAST_USER) VALUES (:IS_PRIMARY, :SHARED_EMAIL_ADDRESS, :EMAIL_ADDRESS, :EMAIL_TYPE, :CONTACT_ID, :DATE_CREATED, :DATE_START, :FROM_ASCO, :ENTITY_ID, :RECORD_STATUS, :OWNER, :LAST_USER)
  svp:
    #svpSel: SELECT ID, CONTACT_PROTOCOL_SITE_ROLE, CONTACT_PROTOCOL_SITE_SEC_ROLE, DATE_CREATED FROM CONTACT_PROTOCOL_SITE WHERE CONTACT_ID=:CONTACT_ID AND PROTOCOL_SITE_ID=:PROTOCOL_SITE_ID AND PRIMARY_EMAIL_ID IN (SELECT ID FROM (SELECT ID,rank() over(partition by E.EMAIL_ADDRESS order by case when E.EMAIL_TYPE ='Primary' then 1 else 2 end, E.DATE_CREATED) EMLRNK FROM EMAIL e WHERE CONTACT_ID =:CONTACT_ID AND EMAIL_ADDRESS =:EMAIL_ADDRESS AND RECORD_STATUS =0) EML WHERE EMLRNK=1) AND RECORD_STATUS=0
    svpSel: SELECT ID, CONTACT_PROTOCOL_SITE_ROLE, CONTACT_PROTOCOL_SITE_SEC_ROLE, DATE_CREATED FROM CONTACT_PROTOCOL_SITE cps WHERE CONTACT_ID=:CONTACT_ID AND PROTOCOL_SITE_ID=:PROTOCOL_SITE_ID AND RECORD_STATUS=0 
    svpIns: INSERT INTO CONTACT_PROTOCOL_SITE (CONTACT_PROTOCOL_SITE_ROLE, CONTACT_PROTOCOL_SITE_SEC_ROLE, CONTACT_ID, PROTOCOL_SITE_ID, ENTITY_ID, RECORD_STATUS, OWNER, LAST_USER, DATE_CREATED, DATE_START) VALUES (:CONTACT_PROTOCOL_SITE_ROLE, :CONTACT_PROTOCOL_SITE_SEC_ROLE, :CONTACT_ID, :PROTOCOL_SITE_ID, :ENTITY_ID, :RECORD_STATUS, :OWNER, :LAST_USER, :DATE_CREATED, :DATE_START)
    emailSel: SELECT E.ID FROM EMAIL e, PROTOCOL_SITE ps WHERE E.PROTOCOL_ID =PS.PROTOCOL_ID AND E.GLOBAL_SITE_ID =PS.GLOBAL_SITE_ID AND E.CONTACT_ID=:CONTACT_ID AND PS.ID=:PROTOCOL_SITE_ID AND E.EMAIL_ADDRESS=:EMAIL_ADDRESS AND E.RECORD_STATUS=0 AND PS.RECORD_STATUS=0
    siteSel: SELECT ID, GLOBAL_SITE_ID, PROTOCOL_ID FROM PROTOCOL_SITE WHERE ID=:ID AND RECORD_STATUS=0
    emailIns: INSERT INTO EMAIL (EMAIL_ADDRESS, EMAIL_TYPE, CONTACT_ID, GLOBAL_SITE_ID, PROTOCOL_ID, SHARED_EMAIL_ADDRESS, IS_PRIMARY, FROM_ASCO, ENTITY_ID, RECORD_STATUS, OWNER, LAST_USER, DATE_CREATED, DATE_START) VALUES (:EMAIL_ADDRESS, :EMAIL_TYPE, :CONTACT_ID, :GLOBAL_SITE_ID, :PROTOCOL_ID, :SHARED_EMAIL_ADDRESS, :IS_PRIMARY, :FROM_ASCO, :ENTITY_ID, :RECORD_STATUS, :OWNER, :LAST_USER, :DATE_CREATED, :DATE_START)    
  svd:
    sel: SELECT ID FROM DOCUMENT  WHERE MONITORING_VISIT_ID = :MONITORING_VISIT_ID AND DOCUMENT_TYPE = 'Follow-Up Letter'
    attachmentIns: INSERT INTO ATTACHMENT (DOCUMENT_ID, ATTACHMENT_NAME, AUTHOR, OWNER, LAST_USER,  ENTITY_ID, IS_CHECKED_OUT, IS_INTERNAL_VIEW_ONLY, CONTENT_SIZE) VALUES(:DOCUMENT_ID, :ATTACHMENT_NAME, :AUTHOR, :OWNER, :LAST_USER, :ENTITY_ID, :IS_CHECKED_OUT, :IS_INTERNAL_VIEW_ONLY, :CONTENT_SIZE)
    #relatedSignaturesIns: INSERT INTO RELATED_SIGNATURES (USERS_ID, DATE_SIGNED, SIGN_STATUS, SIGN_ACTION,IS_LOCKED) VALUES( :USERS_ID, :DATE_SIGNED, :SIGN_STATUS, :SIGN_ACTION, :IS_LOCKED)
    relatedSignaturesIns: INSERT INTO RELATED_SIGNATURES (OWNER, LAST_USER, VERSION, ENTITY_ID, USERS_ID, DATE_SIGNED, SIGN_STATUS, SIGN_ACTION, IS_LOCKED, DATE_SIGNED_USER, RELATED_ATTACHMENT_ID, RELATED_ATTACHMENT_REV, RELATED_OBJECT_ID, RELATED_TYPE_ID, LOCATION_DETAIL_ID, RECORD_STATUS)  VALUES(:OWNER, :LAST_USER, :VERSION, :ENTITY_ID, :USERS_ID, :DATE_SIGNED, :SIGN_STATUS, :SIGN_ACTION, :IS_LOCKED, :DATE_SIGNED_USER, :RELATED_ATTACHMENT_ID, :RELATED_ATTACHMENT_REV, :RELATED_OBJECT_ID, :RELATED_TYPE_ID, :LOCATION_DETAIL_ID, :RECORD_STATUS)
    wsIntegrationLogIns: INSERT INTO WS_INTEGRATION_LOG (MONITORING_VISIT_ID, OBJECT_ID, OBJECT_TYPE, VERSION_NUMBER, STATUS, MIGRATION_ERROR, MIGRATION_DATE, RETRIES, OWNER, LAST_USER, VERSION, ENTITY_ID, RECORD_STATUS, WS_URL) VALUES( :MONITORING_VISIT_ID, :OBJECT_ID, :OBJECT_TYPE, :VERSION_NUMBER, :STATUS, :MIGRATION_ERROR, :MIGRATION_DATE, :RETRIES, :OWNER, :LAST_USER, :VERSION, :ENTITY_ID, :RECORD_STATUS, :WS_URL)
  svr:
    selProtocolMvrTemplateId: Select ID FROM PROTOCOL_MVR_TEMPLATE WHERE PROTOCOL_ID IS NULL AND MONITORING_VISIT_TYPE = 'Generic Visit'
    wsIntegrationLogInsert: INSERT INTO  WS_INTEGRATION_LOG (MONITORING_VISIT_ID, OBJECT_ID, OBJECT_TYPE, VERSION_NUMBER, STATUS, MIGRATION_ERROR, MIGRATION_DATE, RETRIES, OWNER, LAST_USER, VERSION, ENTITY_ID, RECORD_STATUS, WS_URL) VALUES(:MONITORING_VISIT_ID, :OBJECT_ID, :OBJECT_TYPE, :VERSION_NUMBER, :STATUS, :MIGRATION_ERROR, :MIGRATION_DATE, :RETRIES, :OWNER, :LAST_USER, :VERSION, :ENTITY_ID, :RECORD_STATUS, :WS_URL)
    mvrReportSignaturesIns: INSERT INTO  MVR_REPORT_SIGNATURES (LOCATION_DETAIL_ID, USERS_ID, DATE_SIGNED, SIGN_STATUS, SIGN_ACTION, RELATED_TYPE, RELATED_MVR_ID, IS_LOCKED, OWNER, LAST_USER, ENTITY_ID, RECORD_STATUS,  DATE_SIGNED_USER) VALUES(:LOCATION_DETAIL_ID, :USERS_ID, :DATE_SIGNED, :SIGN_STATUS, :SIGN_ACTION, :RELATED_TYPE, :RELATED_MVR_ID, :IS_LOCKED, :OWNER, :LAST_USER, :ENTITY_ID, :RECORD_STATUS, :DATE_SIGNED_USER)
    montoringVReportIns: INSERT INTO MONITORING_VISIT_REPORT (REPORT_STATUS, MONITORING_VISIT_ID, TEMPLATE_ID, LAST_MVR_USER, OWNER, LAST_USER, ENTITY_ID, RECORD_STATUS, REPORT_ITERATION, DATE_UPLOADED_TO_WS) VALUES(:REPORT_STATUS, :MONITORING_VISIT_ID, :TEMPLATE_ID, :LAST_MVR_USER, :OWNER, :LAST_USER, :ENTITY_ID, :RECORD_STATUS, :REPORT_ITERATION, :DATE_UPLOADED_TO_WS)
    
  
logger:
  api: 
    clientId: "bdd2c4728c94449eb109b92917f61742"
    clientSecret: "![BvtfwKiL2GNqu7JYuHlEtVhHTdCvZIRVF20TXgoLYZRC0wochnAuUXZ/KZ88oerm]"
    url: "https://iqvia-oms-logging-proc-1-0-dev.us-e1.cloudhub.io/api"

cloudhub:
  username: "dtms_api_monitoring_user"
  password: "Iqvi@123"
  environmentId: "5e1aceca-126f-4081-a3dd-f90abe3ba25b"
  appname: "iqvia-oms-etmf-doc-dom-1-0-dit"
      
   